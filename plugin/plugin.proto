syntax = "proto3";

option go_package = "github.com/quackduck/devzat/plugin";

package plugin;

service Plugin {
  // Events are implemented through a stream that is held open
  rpc RegisterListener(Listener) returns (stream Event);
  rpc RegisterCmd(CmdDef) returns (stream CmdInvocation);

  // Commands a plugin can call
  rpc SendMessage(Message) returns (MessageRes);
  rpc MiddlewareEditMessage(MiddlewareMessage) returns (MiddlewareEditMessageRes);
  // Have to name it that to avoid colliding with the RPC method name
  rpc MiddlewareDone(MiddlewareDoneMessage) returns (MiddlewareDoneRes);
}

/* RegisterListener */

enum EventType {
  SEND = 0;
}

message SendEvent {
  string room = 1;
  string from = 2;
  string msg = 3;
}

message Listener {
  EventType event = 1;
  optional bool middleware = 2;
  optional bool once = 3;
}

message TestEvent {
  string thing = 1;
}

message Event {
  oneof event {
    SendEvent send_event = 1;
    TestEvent other_event = 2;
  }
}

/* RegisterCmd */

message CmdDef {
  string name = 1;
  string argsInfo = 2;
  string info = 3;
}

message CmdInvocation {
  string room = 1;
  string from = 2;
  string args = 3;
}

/* SendMessage */

message Message {
  string room = 1;
  optional string from = 2;
  string msg = 3;
  optional string ephemeral_to = 4;
}

message MessageRes {}

/* MiddlewareEditMessage */

message MiddlewareMessage {
  optional string msg = 1;
}

message MiddlewareEditMessageRes {}

/* MiddlewareDone */

message MiddlewareDoneMessage {}

message MiddlewareDoneRes {}